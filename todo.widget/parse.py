"""
Parse TODO markdown files into HTML
"""
import os
import sys
import datetime

try:
    from dateutil.parser import parse as parse_date
except:
    def parse_date(ds):
        return datetime.datetime.strptime(ds, '%Y-%m-%d')

def fmt_delta(ds):
    """
    Takes a date string (e.g. "2020-06-23"), determines the day offset from now,
    and formats as HTML
    """
    # Parse and determine delta
    dt = parse_date(ds).date()
    dtn = datetime.datetime.now().date()
    delta = (dt - dtn).days

    # Format delta
    delta_fmt = ''

    if delta < 0:
        delta_fmt = '<span class="todo_delta_past"> PAST: '
        delta = -delta
    elif delta < 5:
        delta_fmt = '<span class="todo_delta_soon">'
    else:
        delta_fmt = '<span class="todo_delta_future">'

    weeks = delta // 7
    days = delta % 7
    if weeks > 0:
        delta_fmt += f'{weeks} week'
        if weeks > 1:
            delta_fmt += 's'
    if days > 0:
        delta_fmt += f' {days} day'
        if days > 1:
            delta_fmt += 's'
    if delta == 0:
        delta_fmt += 'TODAY'

    delta_fmt += '</span>'

    return delta_fmt


def fmt_dates(line, start=0):
    pos = line.find('<', start)
    if pos == -1:
        return line
    end = line.find('>', pos)
    if end == -1:
        # technically parse error, but be forgiving
        return line

    if not line[pos+1].isdigit():
        return fmt_dates(line, pos+1)

    # Extract date string
    ds = line[pos + 1:end]

    # Get weekdate
    weekday = parse_date(ds).date().weekday()
    weekday = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][weekday]
    # put everything together
    prefix = line[:pos]
    postfix = fmt_dates(line[end + 1:])
    if postfix.strip() == '':
        return f'{prefix}</td><td class="duedate"><span class="todo_date">{weekday} {ds}</span> {fmt_delta(ds)}'
    else:
        return f'{prefix}<span class="todo_date">{weekday} {ds}</span>{postfix}'


def fmt_bold(line, md, html):
    n = len(md)
    start = 0
    in_span = False
    while True:
        pos = line.find(md, start)
        if pos == -1:
            return line
        if in_span:
            line = f'{line[:pos]}</{html}>{line[(pos+n):]}'
            start = pos + 3 + len(html)
            in_span = False
        else:
            line = f'{line[:pos]}<{html}>{line[(pos+n):]}'
            start = pos + 2 + len(html)
            in_span = True
    return line


def fmt_line(line):
    line = line.strip()
    line = fmt_bold(line, '**', 'b')
    line = fmt_bold(line, '_', 'i')
    line = fmt_dates(line)
    return f'{line}'


def parse(fname):
    print('<!-- Auto-generated by parse.py -->')
    print('<table>')
    in_table = False
    with open(fname, 'r') as fp:
        for line_ in fp.readlines():
            line = line_.strip()
            if line == '':
                continue
            if line.startswith('#'):
                h_depth = 0
                for c in line:
                    if c != '#':
                        break
                    else:
                        h_depth += 1
                cls = ["", "todo_h1", "todo_h2"][h_depth]
                if h_depth == 1:
                    if in_table:
                        print('</tbody>')
                        print(
                            '<tbody class="sep"><tr><td colspan=3>&nbsp;</td></tr></tbody>'
                        )
                    in_table = True
                    print('<tbody>')
                print(
                    f'<tr><td colspan=2><span class="{cls}">{fmt_line(line[h_depth:])}</span></td></tr>'
                )
            elif line[0] in ['-', 'x']:
                done_c = 'âœ…' if line[0] == 'x' else '&nbsp;'
                linep = fmt_line(line[1:])
                if line[0] == 'x':
                    linep = f'<span class="todo_done">{linep}</span>'
                print(
                    f'<tr><td class="todo_check">{done_c}</td><td class="todo_text">{linep}</td></tr>'
                )
    if in_table:
        print('</tbody>')
    print('</table>')


if __name__ == '__main__':
    parse(sys.argv[1])
